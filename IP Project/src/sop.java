
import java.awt.Color;
import java.awt.Graphics;
import java.awt.MouseInfo;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author krishnan
 */
public class sop extends javax.swing.JFrame {
    
    int x = 230, y = 260;
    int p = 230, q = 400;
    int prevx = 0, prevy = 0 ;
    int prevp = 0, prevq = 0;
    int prevop = 0, prevoq = 0;
    long vx = 0, vy = 0;
    double speedx = 0, speedy = 0;
    /**
     * Creates new form sop
     */
    public sop() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Go back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Pause");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(0, 150, Short.MAX_VALUE))))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 466, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton3))
                        .addGap(9, 9, 9)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public void paint(Graphics g){
    
    //Background
    if(start == 0){
        g.setColor(Colorchooser.bgColor);
        g.fillRect(0,0,600,600);
    }   
    
    //Border
    g.setColor(Color.black);
    g.drawLine(18,38,18,522);
    g.drawLine(18,38,472,38);
    g.drawLine(472,38,472,522);
    g.drawLine(18,522,472,522);
    g.drawLine(18,270,472,270);
    g.drawRect(186,38,120,30);
    g.drawRect(186,492,120,30);
    g.fillRect(186,38,120,10);
    g.fillRect(186,512,120,10);
    g.drawOval(186,240,100,60);
    
    //Erase previously drawn objects
    g.setColor(Colorchooser.bgColor);
    g.drawOval(prevx,prevy,20,20);
    g.fillOval(prevx,prevy,20,20);
    g.drawOval(prevp,prevq,24,24);
    g.fillOval(prevp,prevq,24,24);
    g.drawOval(prevop,prevoq,24,24);
    g.fillOval(prevop,prevoq,24,24);
    
    //Draw objects
    g.setColor(Colorchooser.myMalletColor);
    g.drawOval(p,q,24,24);
    g.fillOval(p,q,24,24);
    g.setColor(Colorchooser.oppMalletColor);
    g.drawOval(pc.p,pc.q,24,24);
    g.fillOval(pc.p,pc.q,24,24);
    g.setColor(Colorchooser.puckColor);
    g.drawOval(x,y,20,20);
    g.fillOval(x,y,20,20);
    
    //Display score
    g.setColor(Colorchooser.bgColor);
    g.fillRect(480,150,30,150);
    g.setColor(Color.black);
    g.drawString(Integer.toString(pcscore),490,250);
    g.drawString(Integer.toString(myscore),490,280);
    
    //Display timer
    if(Airhockey.modeselection==2)
        if(time%100==0)
            g.drawString(Integer.toString(time/100),490,200);
        else
            g.drawString(Integer.toString(prevtime),490,200);
    
    if((x>186)&&(x<296)&&((y<40)||(y>500))){
        g.drawRect(186,38,120,30);
        g.drawRect(186,492,120,30);
        g.fillRect(186,38,120,10);
        g.fillRect(186,512,120,10);
        g.setColor(Colorchooser.bgColor);
        g.fillRect(100,0,300,38);
        g.fillRect(100,523,300,40); 
    }
    if(flag==1){
        g.setColor(Colorchooser.bgColor);
        g.fillRect(100,523,300,40); 
        flag = 0;
    }
    
    prevx = x; prevy = y;
    prevp = p; prevq = q;
    prevop = pc.p; prevoq = pc.q;
    if(time%100==0)
        prevtime = time/100;
}    

//Detect collisions
public boolean hit(){
    return (p-x)*(p-x) + (q-y)*(q-y) <= 484;
}

//Calculate horizontal speed of mallet
double mousespeedx(int x){
    int dx = MouseInfo.getPointerInfo().getLocation().x - x;
    int speed = Math.abs(dx);
    return speed;
}

//Calculate vertical speed of mallet
double mousespeedy(int y){
    int dy = MouseInfo.getPointerInfo().getLocation().y - y;
    int speed = Math.abs(dy);
    return speed;
}

//Assign directions
int xdirection(){
    if((x-p)<0)
        return -1;
    else
        return 1;
}

int ydirection(){
    if((y-q)<0)
        return -1;
    else
        return 1;
}

void reset(){
    start = 0;
    jButton1.setText("Play Again");
    jButton1.setVisible(true);
    jButton3.setVisible(true);
    jButton3.requestFocus();
    jButton1.requestFocus();
    jButton4.setVisible(false);
    vx = 0; vy = 0;
    x = 230; y = 260;
    p = 230; q = 400;
    pc.p  = 230; pc.q = 100;
    pcscore = 0; myscore = 0;
    t1.stop();
    t2.stop();
    repaint();
}

int i=0; //Time reference in speed calculation
int j = 500; //Time reference in collisions
int refx, refy;
long refvx, refvy;
double instspeedx, instspeedy;
double avgspeedx, avgspeedy;
int sqrdist = 1000;
int a = 1; //Pc speed coefficient
int myscore = 0, pcscore = 0;
int start = 0;
int time = 6000;
int prevtime;
static int maxspeed;
int xfactor, yfactor;
int whohit;
pc pc = new pc();
Timer t1, t2;
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
jButton1.setVisible(false);
jButton2.setVisible(false);
jButton3.setVisible(false);
jButton4.setVisible(true);
jButton2.doClick();
start = 1;

if(Airhockey.diffselection==1)
    maxspeed = 3;
if(Airhockey.diffselection==2)
    maxspeed = 5;
ActionListener action;
    action = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            
            //Calculate speed of mallet
            if(i==0){
                refx = p;
                refy = q;
            }
            i++; j++; pc.j++; 
            if(!((x>186)&&(x<296)&&(y<40))&&!((x>186)&&(x<296)&&(y>500)))
                time--;
            if(i==20){
                avgspeedx = mousespeedx(refx);
                avgspeedy = mousespeedy(refy);
                i=0;
            }
            instspeedx = mousespeedx(p);
            instspeedy = mousespeedx(q);
  
            //Opponent movement
            sqrdist = (pc.p-x)*(pc.p-x) + (pc.q-y)*(pc.q-y);
            pc.sx = vx + (x-pc.p)/2;
            if(Math.abs(pc.sx)>maxspeed)
                pc.sx/= Math.ceil((float)(Math.abs(pc.sx)/maxspeed));
            if((x<400)&&(x>40)&&(pc.q<y))
                pc.p+=pc.sx;
            if((y<200)&&(x>40)&&(x<400)&&(vy<0)&&(pc.j>50)&&(!pc.hit(sqrdist))&&(y-pc.q>50)&&(Math.abs(x-pc.p)<30)&&(pc.q<250)&&(pc.q<y))
                pc.attack(a,vy);
            else
                pc.defend(vy);
            if((vx==0)&&(vy==0)&&(y==150))
                pc.q+=3;
            
            //Change velocities during collision
            if(hit()&&((j>20)||(vx==-refvx)||(vy==-refvy))){
                whohit=0;
                j=0;
                vx = vx - vx*Math.abs(x-p)/25;
                vy = vy - vy*Math.abs(y-q)/25;               
                if((p-x)*(p-x) + (q-y)*(q-y)<350){
                    xfactor = Math.abs(x-p)+20;
                    yfactor = Math.abs(y-q)+20;
                }
                else{
                    xfactor = Math.abs(x-p);
                    yfactor = Math.abs(y-q);
                }
                if((avgspeedx<instspeedx)&&(instspeedx>50))
                    speedx = instspeedx;
                else
                    speedx = avgspeedx;
                if((avgspeedy<instspeedy)&&(instspeedy>50))
                    speedy = instspeedy;
                else
                    speedy = avgspeedy;
                vx = (Math.abs(vx)*3/5 + Math.round(speedx*xfactor)/150)*xdirection();
                vy = (Math.abs(vy)*3/5 + Math.round(speedy*yfactor)/150)*ydirection();
                if((vx==0)&&(speedx==0))
                    vx = xdirection();
                if((vy==0)&&(speedy==0))
                    vy = ydirection();
                if(vx>8) vx = 8;
                if(vx<-8) vx = -8;
                if(vy>8) vy = 8;
                if(vy<-8) vy = -8;
                refvx = vx; refvy = vy;
            }
            
            if(pc.hit(sqrdist)){
                whohit=1;
                pc.j=0;
                vx = vx - vx*Math.abs(x-pc.p)/3 + 3;
                vy = vy - vy*Math.abs(y-pc.q)/3 + 3;
                vx = (Math.abs(vx)*4/5 + Math.round(pc.sx*Math.abs(x-pc.p))/150)*pc.xdirection(x);
                vy = (Math.abs(vy)*4/5 + Math.round(pc.sy*Math.abs(y-pc.q))/150)*pc.ydirection(y);
                if(vx==0)
                    vx = xdirection();
                if((vy==0)&&(pc.sy==0))
                    vy = ydirection();
                if(vx>8) vx = 8;
                if(vx<-8) vx = -8;
                if(vy>8) vy = 8;
                if(vy<-8) vy = -8;
                Random r = new Random();
                a = r.nextInt(2)+1;
            }
        }
    };    
    
t1 = new Timer(100, action);
t1.setDelay(1);
t1.setRepeats(true);
t1.start();

this.getContentPane().setBackground(Colorchooser.bgColor);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
//Mallet movement
if(!hit()&&(start==1)){
    if(MouseInfo.getPointerInfo().getLocation().x < 450 && MouseInfo.getPointerInfo().getLocation().x > 20)
        p = MouseInfo.getPointerInfo().getLocation().x;
    if(MouseInfo.getPointerInfo().getLocation().y < 500 && MouseInfo.getPointerInfo().getLocation().y >272)
        q = MouseInfo.getPointerInfo().getLocation().y;     
}    
    }//GEN-LAST:event_formMouseMoved

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
//Puck movement
ActionListener action;
    action = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            
            repaint();
            x+=vx; y+=vy;
            if(((x>450)&&(vx>0))||((x<20)&&(vx<0)))
                vx = -vx;
            if(((y>500)&&(vy>0)&&((x<186)||(x>296)))||((y<40)&&(vy<0)&&((x<186)||(x>296))))
                vy = -vy;
            if((x>186)&&(x<296)&&(y<40)){
                repaint();
                if(whohit==0)
                    JOptionPane.showMessageDialog(null,"Your goal");
                else
                    JOptionPane.showMessageDialog(null,"Own goal !");
                x = 230; y = 150;
                pc.p  = 230; pc.q = 100;
                vx = 0; vy = 0;
                myscore++;
                if((Airhockey.modeselection==1)&&(myscore==5)){
                    repaint();
                    JOptionPane.showMessageDialog(null,"You win");
                    reset();
                }    
            }    
            if((x>186)&&(x<296)&&(y>500)){
                repaint();
                if(whohit==1)
                    JOptionPane.showMessageDialog(null,"Opponent's goal");
                else
                    JOptionPane.showMessageDialog(null,"Own goal !");
                x = 230; y = 400; 
                vx = 0; vy = 0;
                pcscore++;
                if((Airhockey.modeselection==1)&&(pcscore==5)){
                    repaint();
                    JOptionPane.showMessageDialog(null,"You lose");
                    reset();
                }    
            }
            if((Airhockey.modeselection==2)&&(time==0)){
                if(myscore>pcscore)
                     JOptionPane.showMessageDialog(null,"You win");
                if(myscore<pcscore)
                     JOptionPane.showMessageDialog(null,"You lose");
                if(myscore==pcscore)
                     JOptionPane.showMessageDialog(null,"It is a draw");
                reset();
                time = 6000;
            }
        }
    };     

t2 = new Timer(100, action);
t2.setDelay(10);
t2.setRepeats(true);
t2.start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
this.setVisible(false);
new Airhockey().setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed
int pause = 0;
int flag = 0;
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
if(pause==1){
    jButton3.setVisible(false);
    jButton4.setText("Pause");
    jButton1.doClick();
    pause = 0;
    flag = 1;
}
else{
    t1.stop();
    t2.stop();
    pause = 1;
    jButton3.setVisible(true);
    jButton3.requestFocus();
    jButton4.setText("Play");
    jButton4.requestFocus();
}
repaint();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sop().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
